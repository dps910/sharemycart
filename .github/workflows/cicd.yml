name: CI/CD

on:
  push:
    branches:
      - master
      - cicd
      - develop
  pull_request:
env:
  CI: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Initialize workflow variables
        id: vars
        shell: bash
        run: |
            SUBDOMAIN="beta";
            NODE_ENV="staging";
            API_KEY=$API_KEY_STAGING;
            if [ "$BRANCH" == "refs/heads/master" ]; then 
              SUBDOMAIN="app"; 
              NODE_ENV="production";
              API_KEY=$API_KEY_PRODUCTION;
            fi;
            echo ::set-output name=NODE_ENV::${NODE_ENV};
            echo ::set-output name=API_KEY::${API_KEY};
            echo ::set-output name=SUBDOMAIN::${SUBDOMAIN};
            echo ::set-output name=DOMAIN::${SUBDOMAIN}.sharemycart.com;
            echo ::set-output name=PUBLIC_URL::https://${SUBDOMAIN}.sharemycart.com;
        env:
          BRANCH: ${{ github.ref }}
          API_KEY_STAGING: ${{secrets.STAGING_BACKEND_API_KEY}}
          API_KEY_PRODUCTION: ${{secrets.PRODUCTION_BACKEND_API_KEY}}
      - name: print vars
        run: |
          echo "Branch: $BRANCH"
          echo "Public URL: $PUBLIC_URL"
        env:
          BRANCH: ${{ github.ref }}
          PUBLIC_URL: ${{ steps.vars.outputs.PUBLIC_URL }}
      - uses: actions/setup-node@v1
        with:
          node-version: '10.x'
      - run: |
          npm i
      - name: Cache node modules
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Lint
        run: |
          npm run lint
      - name: Setup env for automated test
        uses: SpicyPizza/create-envfile@v1
        with:
          envkey_REACT_APP_BACKEND_API_KEY: ${{secrets.TEST_BACKEND_API_KEY}}
          file_name: .env.test.local
      - name: Setup env for build
        uses: SpicyPizza/create-envfile@v1
        with:
          envkey_REACT_APP_BASENAME: ${{ steps.vars.outputs.PUBLIC_URL }}
          envkey_REACT_APP_BACKEND_API_KEY: ${{ steps.vars.outputs.API_KEY }}
          envkey_REACT_APP_CONFIRMATION_EMAIL_REDIRECT: ${{ steps.vars.outputs.PUBLIC_URL }}
          file_name: .env.build
      - name: Create service account file for firebase access in tests
        run: ./.github/scripts/decrypt_secret.sh
        env:
          LARGE_SECRET_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}
      - name: debug
        run: |
          pwd;
          ls -l;
          cat .env.test.local;
          cat .env.build
      - name: Execute integration tests
        run: |
          npm run test:ci
      - name: Create a build for the target environment
        run: |
          npm run build:for-env
      - name: Upload build
        uses: actions/upload-artifact@v1.0.0
        with:
          # Artifact name
          name: Build
          # Directory containing files to upload
          path: build

  deploy:
    needs: [build]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' #TODO: Switch to real staging once we're out of Beta
    env:
      GITHUB_PAT: ${{ secrets.DEPLOYMENT_PAT }}
    runs-on: ubuntu-latest
    steps:
      - name: Download build
        uses: actions/download-artifact@v1.0.0
        with:
          # Artifact name
          name: Build
          # Destination path
          path: build
      - name: Initialize workflow variables
        id: vars
        shell: bash
        run: |
            SUBDOMAIN="beta"
            REPO="sharemycart/app-staging"
            if [ "$BRANCH" == "refs/heads/master" ]; then 
            SUBDOMAIN="app"; 
            REPO="sharemycart/sharemycart"; 
            fi;
            echo ::set-output name=SUBDOMAIN::${SUBDOMAIN}
            echo ::set-output name=DOMAIN::${SUBDOMAIN}.sharemycart.com
            echo ::set-output name=REPO::${REPO}
        env:
          BRANCH: ${{ github.ref }}
      - name: Deploy to GitHub Pages
        uses: crazy-max/ghaction-github-pages@v1.3.0
        with:
          repo: ${{ steps.vars.outputs.REPO }}
          target_branch: gh-pages
          build_dir: build
          fqdn: ${{ steps.vars.outputs.DOMAIN }}
