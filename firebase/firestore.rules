rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSignedIn() {
      return request.auth != null;
    }

		// ----------- Schema validation functions
		// Since this code runs inside Firestore, we cannot add dependencies to e. g. SimpleSchema
		// but need to hardcode them
		function matchesListSchema(list){
			return 	
					list.keys().hasAll(['allowCreateOwnNeeds', 'type', 'userId', 'isCurrent', 'lifecycleStatus', 'createdAt'])
					&&	list.allowCreateOwnNeeds is bool
					&&	(list.type == 'shopping' || list.type == 'needs')
					&&	list.userId is string
					&&	list.isCurrent is bool
					&&	(list.lifecycleStatus == 'open' || list.lifecycleStatus == 'shopping' || list.lifecycleStatus ==  'finished' || list.lifecycleStatus ==  'archived')
					&&	list.createdAt is timestamp
					|| list.keys().hasAll(['name']) && list.name is string
					|| list.keys().hasAll(['shoppingListId']) && list.shoppingListId is string
					|| list.keys().hasAll(['shoppingListOwnerId']) && list.shoppingListOwnerId is string
		}

		function matchesItemSchema(item){
			return 	
					item.keys().hasAll(['name', 'quantity', 'order', 'createdAt'])
					&&	item.name is string
					&&	item.quantity is number
					&&	item.order is number
					&&	item.createdAt is timestamp
					||	item.keys().hasAll(['unit']) && item.unit is string
					||	item.keys().hasAll(['originShoppingItemUid']) && item.originShoppingItemUid is string
					||	item.keys().hasAll(['shopped']) && item.shopped is bool
					||	item.keys().hasAll(['shoppedBy']) && item.shoppedBy is string
					||	item.keys().hasAll(['shoppedAt']) && item.shoppedAt is timestamp
		}

    match /lists/{list} {
      // we allow reading all lists knowing th uid as a secret. 
      // This can change once we record with whom a list has been shared.
      allow read: if isSignedIn(); 
      
      // since we always create own lists in which we record items, we can 
      // restrict writing to our own data
      allow update, delete: if resource.data.userId == request.auth.uid;

      // Allow updating needs lists which depend on the auth user's shopping lists
      // in order to set the lifecycle status
      allow update: if resource.data.shoppingListOwnerId == request.auth.uid;

      // since there's no userId on the newly created list, we need to allow this if signed in
      allow create: if isSignedIn() 
											&& request.resource.data != null
											&& matchesListSchema(request.resource.data);

      // https://stackoverflow.com/a/48447400
      function listData() {
        return get(/databases/$(database)/documents/lists/$(list)).data
      }
      
      match /items/{item} {
        allow read: if isSignedIn();
        allow update: if listData().shoppingListOwnerId == request.auth.uid;
        allow write: if listData().userId == request.auth.uid 
												&& request.resource.data != null
												&& matchesItemSchema(request.resource.data);
      }
    }
    
    match /users/{userId} {
      allow read, create: if isSignedIn();
      allow update, delete: if request.auth.uid == userId;
    }
  }
}